// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Parent {
  id        String    @id @unique @default(uuid())
  name      String
  email     String    @unique
  password  String
  verified  Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Child     Child[]
}

model Child {
  id               String             @id @unique @default(uuid())
  name             String
  age              Int
  points           Int?               @default(0)
  parent           Parent             @relation(fields: [parentId], references: [id])
  parentId         String
  accessCode       String             @unique
  verified         Boolean?           @default(false)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  AnsweredExercise AnsweredExercise[]
  EarnedBadge      EarnedBadge[]
}

model Subject {
  id        Int        @id @unique @default(autoincrement())
  name      String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  Exercise  Exercise[]
}

model Exercise {
  id               String             @id @unique @default(uuid())
  title            String
  description      String
  subject          Subject            @relation(fields: [subjectId], references: [id])
  subjectId        Int
  difficulty       Int
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  Answer           Answer[]
  AnsweredExercise AnsweredExercise[]
}

model Answer {
  id               String             @id @unique @default(uuid())
  exercise         Exercise           @relation(fields: [exerciseId], references: [id])
  exerciseId       String
  answer           String
  isCorrect        Boolean            @default(false)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  AnsweredExercise AnsweredExercise[]
}

model AnsweredExercise {
  id         String    @id @unique @default(uuid())
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId String
  child      Child     @relation(fields: [childId], references: [id])
  childId    String
  answer     Answer    @relation(fields: [answerId], references: [id])
  answerId   String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model EarnedBadge {
  id        String    @id @unique @default(uuid())
  child     Child     @relation(fields: [childId], references: [id])
  childId   String
  badge     Badge     @relation(fields: [badgeId], references: [id])
  badgeId   String
  createdAt DateTime? @default(now()) // data em que a crian√ßa ganhou o emblema
}

model Badge {
  id          String        @id @unique @default(uuid())
  name        String
  icon        String?
  criteria    String
  threshold   Int
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  EarnedBadge EarnedBadge[]
}
